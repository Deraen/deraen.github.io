<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Deraen's blog</title><link href="http://deraen.github.ioatom.xml" rel="self"></link><link href="http://deraen.github.io"></link><id>http://deraen.github.io</id><author><name>Juho Teperi</name><email>juho.teperi@iki.fi</email></author><entry><title>Hello World â€“ Building a blog using Boot</title><link>http://deraen.github.io/hello-world/</link><content type="html">&lt;p&gt;I've been planning on starting a blog for some time already. But as I love hacking with build tools and such I usually spend some days trying a blog generator before deciding it's not good enough and start writing a new one, without ever finishing anything. Thus I was happy when I saw &lt;a href="https://github.com/hashobject/perun"&gt;Perun&lt;/a&gt; which does pretty much everything I want:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Modular design, easy to extend&lt;/li&gt;&lt;li&gt;No forced metadata schema&lt;/li&gt;&lt;li&gt;&lt;del&gt;RSS&lt;/del&gt; Atom feed&lt;/li&gt;&lt;li&gt;Reads markdown&lt;/li&gt;&lt;li&gt;Templating using Hiccup&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Perun&lt;/h2&gt;&lt;p&gt;While working on a project I like to constantly see what is the result of the code I'm working on. On ClojureScript I use &lt;a href="https://github.com/bhauman/lein-figwheel"&gt;Figwheel&lt;/a&gt;. Thus I wanted the same experience for working on blog, though this is not that useful when writing it's useful while setting up the blog. To make this workflow possible with Perun a two changes were implemented:&lt;/p&gt;&lt;h3&gt;Fast rebuilds&lt;/h3&gt;&lt;p&gt;Parsing the markdown files and their metadata into Clojure data takes relatively long. If the file has not been changed that work is unnecessary. Boot's &lt;code&gt;watch&lt;/code&gt; task and fileset provide an easy way to see which files changed since the last build. Perun's &lt;code&gt;markdown&lt;/code&gt;-task which parses the files uses this to read only changed files and merge the changed metadata to existing metadata from previous builds. This provides build times of around 100ms when post content has been changed.&lt;/p&gt;&lt;h3&gt;Clojure changes&lt;/h3&gt;&lt;p&gt;Templating in Perun is done from Clojure using Hiccup. To automatically render the changes whenever the clj files change the render tasks use Boot pods to run the code in fresh environment. This way the Clojure namespaces are reloaded after the changes and changes are instantly seen. Because all namespaces required by the render namespaces has to be loaded when files change, it usually takes around 10 seconds to build the site after clj file change.&lt;/p&gt;&lt;p&gt;Alternative approach would be to use &lt;a href="https://github.com/clojure/tools.namespace"&gt;tools.namespace&lt;/a&gt; to reload the changed namespaces. That should be quite a bit faster at the expense of simplicity. This approach is used by &lt;a href="https://github.com/martinklepsch/boot-garden"&gt;boot-garden&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Extendability&lt;/h3&gt;&lt;p&gt;As mentioned Perun should be easy to extend. This is achieved by implementing Perun using multiple Boot tasks which can be composed. Below is a example from this blog's &lt;code&gt;build.boot&lt;/code&gt; file which shows some examples of the extendability. The tasks can be categorized in three types:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Tasks which &lt;strong&gt;read&lt;/strong&gt; metadata from files, currently only &lt;code&gt;markdown&lt;/code&gt; (1)&lt;/li&gt;&lt;li&gt;Tasks which &lt;strong&gt;manipulate&lt;/strong&gt; the metadata (2)&lt;/li&gt;&lt;li&gt;Tasks which &lt;strong&gt;render&lt;/strong&gt; some output (3, 4)&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class="clj"&gt;(deftask split-keywords []
  (boot/with-pre-wrap fileset
    (-&amp;gt;&amp;gt; fileset
         (perun/get-perun-meta)
         (perun/map-vals
           (fn [{:keys [keywords] :as post}]
             (if (string? keywords)
               (assoc post :keywords (-&amp;gt;&amp;gt; (string/split keywords #",")
                                          (mapv string/trim)))
               post)))
         (perun/with-perun-meta fileset))))

(deftask build
  [p prod bool "Build rss, sitemap etc."]
  (comp (less :source-map true :compress prod)
        ;; 1
        (markdown)
        ;; 2
        (if prod (draft) identity)
        (slug)
        (permalink)
        (split-keywords)
        ;; 3
        (render :renderer 'blog.views.post/render)
        (collection :renderer 'blog.views.index/render :page "index.html")
        (collection :renderer 'blog.views.tags/render :page "tags/index.html")
        (collection :renderer 'blog.views.atom/render :page "atom.xml")
        ;; 4
        (if prod (sitemap :filename "sitemap.xml") identity)
        (if prod
          (rss :title "Blog"
               :description "Deraen's blog"
               :link "http://deraen.github.io")
          identity)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The task &lt;code&gt;split-keywords&lt;/code&gt; is a task which manipulates the metadata by splitting keyword strings. Though I now see that I should instead just define the keywords as arrays in YAML metadata of the posts.&lt;/p&gt;&lt;p&gt;In this example there are five tasks which output files. A task which renders all the posts, two tasks which render a collection view and tasks for RSS and sitemap. The second collection task collects a list of all of tags (keywords) in the posts and creates a tag cloud out of those, what is cool here is that to create a tag page no special task was needed as the render function can itself do the necessary work (one &lt;code&gt;reduce&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;Render tasks do not need to necessarily output HTML, they can produce string in any way which is then written to the file. &lt;code&gt;collection&lt;/code&gt;-task can for example produce HTML using Hiccup or XML using data.xml.&lt;/p&gt;&lt;h2&gt;HTML and CSS livereload&lt;/h2&gt;&lt;p&gt;Figwheel style ClojureScript development is already possible with &lt;a href="http://boot-clj.com"&gt;Boot&lt;/a&gt; using &lt;a href="https://github.com/adzerk-oss/boot-reload"&gt;boot-reload&lt;/a&gt; but that is heavily built for ClojureScript use cases. The client is written in ClojureScript so a built step is required. &lt;del&gt;Also boot-reload doesn't handle HTML file reloads which are the essential for being useful for static page development.&lt;/del&gt; Boot-reload does handle HTML reloads.&lt;/p&gt;&lt;p&gt;Previously I've been using &lt;a href="http://livereload.com"&gt;LiveReload.js&lt;/a&gt; with &lt;a href="http://gulpjs.com/"&gt;Gulp.js&lt;/a&gt; so I thought that should be a good fit for Boot also. Luckily &lt;a href="https://github.com/bhurlow/clj-livereload"&gt;a Clojure implementation&lt;/a&gt; of LiveReload already existed. It required some API changes to make it generally usable library. After the changes it was a breeze to create a &lt;a href="https://github.com/Deraen/boot-livereload"&gt;boot task&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Cool features and possibilities&lt;/h2&gt;&lt;p&gt;As it is easy to manipulate the data between reading the files and rendering there is great opportunity to move some features which are usually implemented in the browser to build process. The value I see there is that RSS readers (AFAIK) do not execute JS so those readers are left without e.g. code highlighting.&lt;/p&gt;&lt;p&gt;Another possibility is to hyphenate the text. This is even more useful as the hyphenation is relatively expensive operation so it's great if it only needs to be executed once instead of each page load. For this reason I already started writing &lt;a href="https://github.com/Deraen/clj-hyphenate"&gt;clj-hyphenate&lt;/a&gt; which implements Franklin M. Liang's hyphenation algorithm in Clojure. The algorithm is the same as used by TeX, LibreOffice and Hyphenator.js. To hyphenate HTML it is possible to insert soft-hyphens into the text which the browser only shows if the word needs to be split into multiple lines.&lt;/p&gt;</content></entry></feed>